name: CI/CD Pipeline - MILAPP

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Executar testes de segurança diariamente às 2h
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: milapp

jobs:
  # Job de qualidade de código
  code-quality:
    name: Qualidade de Código
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Instalar dependências Python
      run: |
        cd backend
        pip install -r requirements.txt
        pip install flake8 black isort mypy bandit safety
    
    - name: Instalar dependências Node.js
      run: |
        cd frontend
        npm ci
    
    - name: Linting Python (Backend)
      run: |
        cd backend
        flake8 app tests --max-line-length=100 --extend-ignore=E203,W503
        black --check app tests
        isort --check-only app tests
    
    - name: Type checking Python
      run: |
        cd backend
        mypy app --ignore-missing-imports
    
    - name: Linting TypeScript (Frontend)
      run: |
        cd frontend
        npm run lint
        npm run type-check
    
    - name: Verificar formatação Frontend
      run: |
        cd frontend
        npx prettier --check src/
    
    - name: Análise de segurança Python
      run: |
        cd backend
        bandit -r app -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
    
    - name: Análise de segurança Node.js
      run: |
        cd frontend
        npm audit --audit-level=moderate || true
    
    - name: Upload relatórios de segurança
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          backend/bandit-report.json
          backend/safety-report.json
        retention-days: 30

  # Job de testes backend
  test-backend:
    name: Testes Backend
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_milapp
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Instalar dependências
      run: |
        cd backend
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov pytest-mock
    
    - name: Configurar variáveis de teste
      run: |
        cd backend
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_milapp" >> .env.test
        echo "SECRET_KEY=test-secret-key-for-testing-only-32-chars-long" >> .env.test
        echo "ENVIRONMENT=test" >> .env.test
    
    - name: Executar testes unitários
      run: |
        cd backend
        pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=html
    
    - name: Executar testes de integração
      run: |
        cd backend
        pytest tests/integration/ -v --cov=app --cov-append
    
    - name: Executar testes de segurança
      run: |
        cd backend
        pytest tests/unit/test_security.py -v
    
    - name: Upload cobertura de código
      uses: codecov/codecov-action@v4
      with:
        file: backend/coverage.xml
        flags: backend
        name: backend-coverage
    
    - name: Upload relatório de cobertura
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-backend
        path: backend/htmlcov/
        retention-days: 30

  # Job de testes frontend
  test-frontend:
    name: Testes Frontend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Instalar dependências
      run: |
        cd frontend
        npm ci
    
    - name: Executar testes unitários
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false --passWithNoTests
    
    - name: Executar testes de integração
      run: |
        cd frontend
        npm run test:integration || echo "Testes de integração não configurados"
    
    - name: Executar testes E2E (se configurado)
      run: |
        cd frontend
        npm run test:e2e || echo "Testes E2E não configurados"
    
    - name: Upload cobertura de código
      uses: codecov/codecov-action@v4
      with:
        file: frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
    
    - name: Upload relatório de cobertura
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-frontend
        path: frontend/coverage/
        retention-days: 30

  # Job de build e teste de containers
  build-containers:
    name: Build e Teste de Containers
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login no GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build e testar Backend
      run: |
        cd backend
        docker build -t ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/backend:${{ github.sha }} .
        docker run --rm ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/backend:${{ github.sha }} python -m pytest tests/unit/ -v
    
    - name: Build e testar Frontend
      run: |
        cd frontend
        docker build -t ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/frontend:${{ github.sha }} .
        docker run --rm ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/frontend:${{ github.sha }} npm test -- --watchAll=false
    
    - name: Push imagens (apenas em main)
      if: github.ref == 'refs/heads/main'
      run: |
        docker push ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/backend:${{ github.sha }}
        docker push ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/frontend:${{ github.sha }}
        docker tag ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/backend:${{ github.sha }} ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/backend:latest
        docker tag ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/frontend:${{ github.sha }} ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/frontend:latest
        docker push ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/backend:latest
        docker push ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/frontend:latest

  # Job de análise de segurança
  security-scan:
    name: Análise de Segurança
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Job de deploy (apenas em main)
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [code-quality, test-backend, test-frontend, build-containers, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
    
    - name: Deploy para ambiente de staging
      run: |
        echo "Deploy para staging iniciado..."
        # Aqui você pode adicionar comandos específicos do seu ambiente
        # Exemplo: kubectl apply, docker-compose, etc.
    
    - name: Executar testes de smoke
      run: |
        echo "Executando testes de smoke..."
        # Testes básicos para verificar se o deploy funcionou
        curl -f http://staging.milapp.com/health || exit 1
    
    - name: Deploy para produção
      run: |
        echo "Deploy para produção iniciado..."
        # Deploy para produção após testes de smoke
    
    - name: Notificar deploy
      run: |
        echo "Deploy concluído com sucesso!"
        # Aqui você pode adicionar notificações (Slack, email, etc.)

  # Job de backup automático
  backup:
    name: Backup Automático
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    schedule:
      - cron: '0 3 * * *'  # Diariamente às 3h
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
    
    - name: Executar backup
      run: |
        chmod +x scripts/backup.sh
        ./scripts/backup.sh
    
    - name: Upload backup
      uses: actions/upload-artifact@v4
      with:
        name: database-backup
        path: backups/
        retention-days: 7

  # Job de limpeza
  cleanup:
    name: Limpeza
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Limpar cache
      run: |
        docker system prune -f || true
        docker image prune -f || true
    
    - name: Limpar artifacts antigos
      run: |
        echo "Limpando artifacts antigos..."
        # Lógica para limpar artifacts antigos se necessário 