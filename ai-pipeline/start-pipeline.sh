#!/bin/bash

# MILAPP - Script de Inicializa√ß√£o do Pipeline IA-IA
# Integra√ß√£o autom√°tica entre Lovable IA e Cursor IA

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
}

info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] INFO: $1${NC}"
}

# Banner
echo -e "${BLUE}"
cat << "EOF"
‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù
‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù 
‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë     
‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù     
                                                 
ü§ñ Pipeline IA-IA - Lovable + Cursor Integration
EOF
echo -e "${NC}"

# Verificar se estamos no diret√≥rio correto
if [ ! -f "ai-pipeline/config.yaml" ]; then
    error "Execute este script do diret√≥rio raiz do projeto MILAPP"
    exit 1
fi

# Verificar depend√™ncias
log "Verificando depend√™ncias..."

# Python
if ! command -v python3 &> /dev/null; then
    error "Python 3 n√£o encontrado. Instale Python 3.8+"
    exit 1
fi

# Docker
if ! command -v docker &> /dev/null; then
    warn "Docker n√£o encontrado. Algumas funcionalidades podem n√£o funcionar"
fi

# Git
if ! command -v git &> /dev/null; then
    error "Git n√£o encontrado. Instale Git"
    exit 1
fi

log "Depend√™ncias verificadas ‚úì"

# Verificar vari√°veis de ambiente
log "Verificando configura√ß√µes..."

# Criar arquivo .env se n√£o existir
if [ ! -f ".env" ]; then
    warn "Arquivo .env n√£o encontrado. Criando template..."
    cp env.example .env
    echo -e "${YELLOW}‚ö†Ô∏è  Configure as vari√°veis no arquivo .env antes de continuar${NC}"
    echo -e "${YELLOW}   Vari√°veis necess√°rias:${NC}"
    echo -e "${YELLOW}   - LOVABLE_API_KEY${NC}"
    echo -e "${YELLOW}   - CURSOR_API_KEY${NC}"
    echo -e "${YELLOW}   - DEPLOY_API_KEY${NC}"
    echo -e "${YELLOW}   - REDIS_URL${NC}"
    echo -e "${YELLOW}   - ENCRYPTION_KEY${NC}"
    echo ""
    read -p "Pressione Enter ap√≥s configurar o .env..."
fi

# Carregar vari√°veis de ambiente
if [ -f ".env" ]; then
    export $(cat .env | grep -v '^#' | xargs)
fi

# Verificar vari√°veis cr√≠ticas
if [ -z "$LOVABLE_API_KEY" ]; then
    error "LOVABLE_API_KEY n√£o configurada"
    exit 1
fi

if [ -z "$CURSOR_API_KEY" ]; then
    error "CURSOR_API_KEY n√£o configurada"
    exit 1
fi

log "Configura√ß√µes verificadas ‚úì"

# Instalar depend√™ncias Python
log "Instalando depend√™ncias Python..."

# Criar virtual environment se n√£o existir
if [ ! -d "venv" ]; then
    log "Criando virtual environment..."
    python3 -m venv venv
fi

# Ativar virtual environment
source venv/bin/activate

# Instalar depend√™ncias
pip install -r ai-pipeline/requirements.txt

log "Depend√™ncias Python instaladas ‚úì"

# Criar diret√≥rios necess√°rios
log "Criando estrutura de diret√≥rios..."

mkdir -p logs
mkdir -p backups
mkdir -p ai-pipeline/cache

log "Estrutura criada ‚úì"

# Verificar conectividade
log "Testando conectividade..."

# Testar APIs
if curl -s --connect-timeout 5 "https://api.lovable.com/health" > /dev/null; then
    log "Lovable IA: Conectado ‚úì"
else
    warn "Lovable IA: N√£o foi poss√≠vel conectar"
fi

if curl -s --connect-timeout 5 "https://api.cursor.com/health" > /dev/null; then
    log "Cursor IA: Conectado ‚úì"
else
    warn "Cursor IA: N√£o foi poss√≠vel conectar"
fi

# Iniciar servi√ßos
log "Iniciando servi√ßos..."

# Iniciar Redis se n√£o estiver rodando
if ! docker ps | grep -q redis; then
    log "Iniciando Redis..."
    docker run -d --name milapp-redis -p 6379:6379 redis:7-alpine
fi

# Iniciar dashboard de aprova√ß√£o
log "Iniciando dashboard de aprova√ß√£o..."
cd ai-pipeline
streamlit run approval-dashboard.py --server.port 8501 --server.address 0.0.0.0 &
DASHBOARD_PID=$!

# Iniciar orquestrador
log "Iniciando orquestrador IA-IA..."
python automation-orchestrator.py &
ORCHESTRATOR_PID=$!

# Salvar PIDs para cleanup
echo $DASHBOARD_PID > .dashboard.pid
echo $ORCHESTRATOR_PID > .orchestrator.pid

# Aguardar inicializa√ß√£o
sleep 3

# Verificar se os servi√ßos est√£o rodando
if kill -0 $DASHBOARD_PID 2>/dev/null; then
    log "Dashboard: Rodando ‚úì"
else
    error "Dashboard: Falha ao iniciar"
    exit 1
fi

if kill -0 $ORCHESTRATOR_PID 2>/dev/null; then
    log "Orquestrador: Rodando ‚úì"
else
    error "Orquestrador: Falha ao iniciar"
    exit 1
fi

# Mostrar informa√ß√µes de acesso
echo ""
echo -e "${GREEN}üéâ Pipeline IA-IA iniciado com sucesso!${NC}"
echo ""
echo -e "${BLUE}üìä Dashboard de Aprova√ß√£o:${NC}"
echo -e "   URL: http://localhost:8501"
echo -e "   PID: $DASHBOARD_PID"
echo ""
echo -e "${BLUE}ü§ñ Orquestrador IA-IA:${NC}"
echo -e "   PID: $ORCHESTRATOR_PID"
echo ""
echo -e "${BLUE}üìù Logs:${NC}"
echo -e "   Dashboard: tail -f logs/dashboard.log"
echo -e "   Orquestrador: tail -f logs/orchestrator.log"
echo -e "   Pipeline: tail -f logs/ai-pipeline.log"
echo ""
echo -e "${YELLOW}üí° Como usar:${NC}"
echo -e "   1. Acesse http://localhost:8501"
echo -e "   2. Configure suas APIs no dashboard"
echo -e "   3. Crie uma nova task"
echo -e "   4. Aprove as mudan√ßas geradas"
echo ""
echo -e "${YELLOW}üõë Para parar:${NC}"
echo -e "   ./stop-pipeline.sh"
echo ""

# Fun√ß√£o de cleanup
cleanup() {
    log "Parando servi√ßos..."
    
    if [ -f ".dashboard.pid" ]; then
        kill $(cat .dashboard.pid) 2>/dev/null || true
        rm .dashboard.pid
    fi
    
    if [ -f ".orchestrator.pid" ]; then
        kill $(cat .orchestrator.pid) 2>/dev/null || true
        rm .orchestrator.pid
    fi
    
    log "Servi√ßos parados ‚úì"
    exit 0
}

# Capturar sinais para cleanup
trap cleanup SIGINT SIGTERM

# Manter script rodando
log "Pipeline ativo. Pressione Ctrl+C para parar."
while true; do
    sleep 10
    
    # Verificar se os processos ainda est√£o rodando
    if [ -f ".dashboard.pid" ] && ! kill -0 $(cat .dashboard.pid) 2>/dev/null; then
        error "Dashboard parou inesperadamente"
        cleanup
    fi
    
    if [ -f ".orchestrator.pid" ] && ! kill -0 $(cat .orchestrator.pid) 2>/dev/null; then
        error "Orquestrador parou inesperadamente"
        cleanup
    fi
done 