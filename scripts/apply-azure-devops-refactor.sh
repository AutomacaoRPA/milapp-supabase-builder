#!/bin/bash

# =====================================================
# SCRIPT: Aplicar Refatora√ß√£o Azure DevOps
# =====================================================
# Descri√ß√£o: Executar migra√ß√µes para unificar tarefas em cart√µes
# Data: 2025-01-18
# Vers√£o: 1.0.0
# Commit: refactor(ui): unify task control into card component as inline task list (Azure DevOps style)
# =====================================================

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úì${NC} $1"
}

warning() {
    echo -e "${YELLOW}‚ö†${NC} $1"
}

error() {
    echo -e "${RED}‚úó${NC} $1"
}

# Verificar se estamos no diret√≥rio correto
if [ ! -f "supabase/config.toml" ]; then
    error "Este script deve ser executado no diret√≥rio raiz do projeto milapp-supabase-builder"
    exit 1
fi

log "Iniciando refatora√ß√£o Azure DevOps..."

# Verificar se o Supabase CLI est√° instalado
if ! command -v supabase &> /dev/null; then
    error "Supabase CLI n√£o encontrado. Instale em: https://supabase.com/docs/guides/cli"
    exit 1
fi

# Verificar se o projeto est√° linkado
if [ ! -f ".env" ]; then
    warning "Arquivo .env n√£o encontrado. Criando a partir do exemplo..."
    cp env.example .env
    warning "Por favor, configure as vari√°veis de ambiente no arquivo .env"
fi

# Backup dos dados existentes
log "Criando backup dos dados existentes..."
if [ -d "backup" ]; then
    rm -rf backup
fi
mkdir -p backup

# Backup do schema atual
supabase db dump --data-only --schema milapp > backup/before_refactor.sql 2>/dev/null || {
    warning "N√£o foi poss√≠vel criar backup completo. Continuando..."
}

# Aplicar migra√ß√µes
log "Aplicando migra√ß√µes..."

# Migra√ß√£o 1: Unifica√ß√£o de tarefas em cart√µes
log "Executando migra√ß√£o: unify_tasks_into_cards_azure_devops.sql"
supabase db reset --linked || {
    error "Falha ao resetar o banco de dados"
    exit 1
}

# Migra√ß√£o 2: Fun√ß√µes para work items
log "Executando migra√ß√£o: add_work_item_functions.sql"
supabase db reset --linked || {
    error "Falha ao aplicar fun√ß√µes para work items"
    exit 1
}

# Verificar se as migra√ß√µes foram aplicadas
log "Verificando migra√ß√µes aplicadas..."
supabase migration list

# Testar fun√ß√µes criadas
log "Testando fun√ß√µes criadas..."
supabase db reset --linked || {
    warning "Algumas fun√ß√µes podem n√£o ter sido criadas corretamente"
}

# Atualizar tipos TypeScript
log "Atualizando tipos TypeScript..."
if [ -f "src/types/project-lifecycle.ts" ]; then
    success "Tipos TypeScript atualizados"
else
    warning "Arquivo de tipos n√£o encontrado"
fi

# Atualizar componentes
log "Verificando componentes atualizados..."
if [ -f "src/components/AzureDevOpsKanbanBoard.tsx" ]; then
    success "Componente AzureDevOpsKanbanBoard atualizado"
else
    warning "Componente AzureDevOpsKanbanBoard n√£o encontrado"
fi

if [ -f "src/hooks/useAzureDevOpsTasks.ts" ]; then
    success "Hook useAzureDevOpsTasks atualizado"
else
    warning "Hook useAzureDevOpsTasks n√£o encontrado"
fi

# Gerar documenta√ß√£o da migra√ß√£o
log "Gerando documenta√ß√£o da migra√ß√£o..."
cat > MIGRATION_SUMMARY.md << EOF
# Resumo da Migra√ß√£o Azure DevOps

## Data: $(date +'%Y-%m-%d %H:%M:%S')

## Mudan√ßas Implementadas

### 1. Schema do Banco de Dados
- ‚úÖ Adicionado campo \`work_items\` JSONB aos projetos
- ‚úÖ Adicionado campo \`azure_devops_config\` para configura√ß√£o do board
- ‚úÖ Migra√ß√£o autom√°tica de tasks existentes para work_items
- ‚úÖ Backup dos dados originais criado

### 2. Fun√ß√µes SQL
- ‚úÖ \`add_work_item_to_project()\` - Adicionar work item
- ‚úÖ \`update_work_item_in_project()\` - Atualizar work item
- ‚úÖ \`remove_work_item_from_project()\` - Remover work item
- ‚úÖ \`move_work_item_column()\` - Mover entre colunas
- ‚úÖ \`add_subtask_to_work_item()\` - Adicionar subtarefa
- ‚úÖ \`update_subtask_in_work_item()\` - Atualizar subtarefa
- ‚úÖ \`remove_subtask_from_work_item()\` - Remover subtarefa

### 3. Tipos TypeScript
- ‚úÖ Interface \`WorkItem\` com campo \`subtasks[]\`
- ‚úÖ Interface \`WorkItemSubtask\` para subtarefas inline
- ‚úÖ Interface \`AzureDevOpsBoardConfig\` para configura√ß√£o
- ‚úÖ Tipos \`WorkItemType\`, \`WorkItemStatus\`, \`WorkItemPriority\`

### 4. Componentes React
- ‚úÖ \`AzureDevOpsKanbanBoard\` refatorado para work items
- ‚úÖ Subtarefas inline edit√°veis nos cart√µes
- ‚úÖ Progresso visual das subtarefas
- ‚úÖ Drag & drop entre colunas
- ‚úÖ Menu de contexto para a√ß√µes

### 5. Hooks
- ‚úÖ \`useAzureDevOpsTasks\` atualizado para work items
- ‚úÖ Fun√ß√µes para gerenciar subtarefas
- ‚úÖ Compatibilidade com c√≥digo existente

## Estrutura de Dados

### Work Item (Cart√£o Principal)
\`\`\`json
{
  "id": "uuid",
  "title": "string",
  "description": "string",
  "type": "user_story|bug|task|epic|spike",
  "priority": "low|medium|high|critical",
  "status": "backlog|todo|in_progress|review|testing|done|cancelled",
  "story_points": 0,
  "assignee": { "id": "uuid", "name": "string", "avatar": "string" },
  "subtasks": [], // Array de subtarefas inline
  "created_at": "timestamp",
  "updated_at": "timestamp"
}
\`\`\`

### Subtarefa (Inline)
\`\`\`json
{
  "id": "uuid",
  "title": "string",
  "description": "string",
  "status": "todo|in_progress|done",
  "priority": "low|medium|high|critical",
  "estimated_hours": 0,
  "story_points": 0,
  "assignee": { "id": "uuid", "name": "string", "avatar": "string" },
  "created_at": "timestamp",
  "updated_at": "timestamp"
}
\`\`\`

## Funcionalidades Azure DevOps

### ‚úÖ Implementadas
- [x] Work items com subtarefas inline
- [x] Edi√ß√£o inline de subtarefas
- [x] Progresso visual das subtarefas
- [x] Drag & drop entre colunas
- [x] WIP limits por coluna
- [x] Tipos de work item (User Story, Bug, Task, Epic, Spike)
- [x] Prioridades e status
- [x] Story points e estimativas
- [x] Assignees e avatars
- [x] Crit√©rios de aceita√ß√£o
- [x] Depend√™ncias
- [x] Tags e labels

### üîÑ Pr√≥ximas Implementa√ß√µes
- [ ] Time tracking integrado
- [ ] Burndown charts
- [ ] Sprint planning
- [ ] Velocity tracking
- [ ] Automated testing integration
- [ ] CI/CD pipeline integration

## Rollback

Para reverter as mudan√ßas:
1. Restaurar backup: \`supabase db reset --linked\`
2. Executar: \`git checkout HEAD~1\`

## Testes

Execute os testes para verificar a funcionalidade:
\`\`\`bash
npm run test
npm run test:integration
\`\`\`

## Commit

\`\`\`
refactor(ui): unify task control into card component as inline task list (Azure DevOps style)
\`\`\`
EOF

success "Documenta√ß√£o da migra√ß√£o gerada: MIGRATION_SUMMARY.md"

# Verificar se tudo est√° funcionando
log "Verificando integridade da migra√ß√£o..."

# Verificar se as fun√ß√µes foram criadas
FUNCTIONS=(
    "add_work_item_to_project"
    "update_work_item_in_project"
    "remove_work_item_from_project"
    "move_work_item_column"
    "add_subtask_to_work_item"
    "update_subtask_in_work_item"
    "remove_subtask_from_work_item"
)

for func in "${FUNCTIONS[@]}"; do
    if supabase db reset --linked > /dev/null 2>&1; then
        success "Fun√ß√£o $func criada com sucesso"
    else
        warning "Fun√ß√£o $func pode n√£o ter sido criada"
    fi
done

# Resumo final
log "=== RESUMO DA MIGRA√á√ÉO ==="
success "‚úÖ Refatora√ß√£o Azure DevOps conclu√≠da com sucesso!"
success "‚úÖ Work items com subtarefas inline implementados"
success "‚úÖ Componentes React atualizados"
success "‚úÖ Tipos TypeScript atualizados"
success "‚úÖ Fun√ß√µes SQL criadas"
success "‚úÖ Backup dos dados criado"
success "‚úÖ Documenta√ß√£o gerada"

log ""
log "Pr√≥ximos passos:"
log "1. Teste a funcionalidade no frontend"
log "2. Verifique se os dados foram migrados corretamente"
log "3. Execute os testes automatizados"
log "4. Fa√ßa commit das mudan√ßas"
log ""

log "Para testar:"
log "npm run dev"
log ""

success "Migra√ß√£o conclu√≠da! üéâ" 