version: '3.8'

services:
  backend-staging:
    build: ./backend
    ports:
      - "8001:8000"
    environment:
      - SUPABASE_URL=${SUPABASE_URL_STAGING}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY_STAGING}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY_STAGING}
      - REDIS_URL=redis://redis-staging:6379/0
      - SECRET_KEY=${SECRET_KEY_STAGING}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LANGCHAIN_API_KEY=${LANGCHAIN_API_KEY}
      - AZURE_TENANT_ID=${AZURE_TENANT_ID}
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
      - N8N_BASE_URL=${N8N_BASE_URL}
      - N8N_API_KEY=${N8N_API_KEY}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - MINIO_ENDPOINT=minio-staging:9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY_STAGING}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY_STAGING}
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME_STAGING}
      - MINIO_SECURE=false
      - PROMETHEUS_URL=${PROMETHEUS_URL_STAGING}
      - GRAFANA_URL=${GRAFANA_URL_STAGING}
      - CORS_ORIGINS=${CORS_ORIGINS_STAGING}
      - ENVIRONMENT=staging
      - DEBUG=true
    depends_on:
      - redis-staging
      - minio-staging
    volumes:
      - ./backend:/app
      - milapp_files_staging:/app/uploads
    restart: unless-stopped
    networks:
      - milapp-staging

  frontend-staging:
    build: ./frontend
    ports:
      - "3001:80"
    depends_on:
      - backend-staging
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/nginx.conf
    restart: unless-stopped
    networks:
      - milapp-staging

  dashboard-staging:
    build: ./dashboards
    ports:
      - "8502:8501"
    environment:
      - SUPABASE_URL=${SUPABASE_URL_STAGING}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY_STAGING}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY_STAGING}
    depends_on:
      - backend-staging
    restart: unless-stopped
    networks:
      - milapp-staging

  redis-staging:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    volumes:
      - redis_data_staging:/data
    restart: unless-stopped
    networks:
      - milapp-staging

  minio-staging:
    image: minio/minio:latest
    ports:
      - "9002:9000"
      - "9003:9001"
    environment:
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY_STAGING}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY_STAGING}
    volumes:
      - minio_data_staging:/data
    command: server /data --console-address ":9001"
    restart: unless-stopped
    networks:
      - milapp-staging

  prometheus-staging:
    image: prom/prometheus:latest
    ports:
      - "9091:9090"
    volumes:
      - ./devops/monitoring/prometheus.staging.yml:/etc/prometheus/prometheus.yml
      - prometheus_data_staging:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - milapp-staging

  grafana-staging:
    image: grafana/grafana:latest
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin-staging
    volumes:
      - grafana_data_staging:/var/lib/grafana
      - ./devops/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./devops/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    networks:
      - milapp-staging

volumes:
  redis_data_staging:
  minio_data_staging:
  prometheus_data_staging:
  grafana_data_staging:
  milapp_files_staging:

networks:
  milapp-staging:
    driver: bridge 